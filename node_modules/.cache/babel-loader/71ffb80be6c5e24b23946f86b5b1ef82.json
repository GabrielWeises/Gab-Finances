{"ast":null,"code":"var _jsxFileName = \"/Users/rayssamel/Downloads/dt-money-master/src/containers/TransactionsProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { TransactionsContext } from \"../contexts/Transactions\";\nimport { useAuth } from \"../hooks\";\nimport { api } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const {\n    user,\n    signed\n  } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n\n  async function createTransaction(transaction) {\n    const response = await api.post(\"/transactions\", transaction, {\n      headers: {\n        username: user === null || user === void 0 ? void 0 : user.username,\n        token: user === null || user === void 0 ? void 0 : user.token\n      }\n    });\n    return setTransactions([...transactions, response.data.transaction]);\n  }\n\n  useEffect(() => {\n    if (signed) {\n      api.get(\"/transactions\", {\n        headers: {\n          username: user === null || user === void 0 ? void 0 : user.username,\n          token: user === null || user === void 0 ? void 0 : user.token\n        }\n      }).then(response => setTransactions(response.data.transactions));\n    } else {\n      setTransactions([]);\n    }\n  }, [signed, user]);\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsProvider, \"8gD3JtjL331WfkBgnlRmGZ5GEoc=\", false, function () {\n  return [useAuth];\n});\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/Users/rayssamel/Downloads/dt-money-master/src/containers/TransactionsProvider.tsx"],"names":["useEffect","useState","TransactionsContext","useAuth","api","TransactionsProvider","children","user","signed","transactions","setTransactions","createTransaction","transaction","response","post","headers","username","token","data","get","then"],"mappings":";;;AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,SAASC,GAAT,QAAoB,iBAApB;;AA4BA,OAAO,SAASC,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAAuE;AAAA;;AAC5E,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBL,OAAO,EAAhC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAyB,EAAzB,CAAhD;;AAEA,iBAAeU,iBAAf,CAAiCC,WAAjC,EAAmE;AACjE,UAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,IAAJ,CACrB,eADqB,EAErBF,WAFqB,EAGrB;AACEG,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAET,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAES,QADT;AAEPC,QAAAA,KAAK,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEU;AAFN;AADX,KAHqB,CAAvB;AAUA,WAAOP,eAAe,CAAC,CAAC,GAAGD,YAAJ,EAAkBI,QAAQ,CAACK,IAAT,CAAcN,WAAhC,CAAD,CAAtB;AACD;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,MAAJ,EAAY;AACVJ,MAAAA,GAAG,CACAe,GADH,CACkC,eADlC,EACmD;AAC/CJ,QAAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,EAAET,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAES,QADT;AAEPC,UAAAA,KAAK,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEU;AAFN;AADsC,OADnD,EAOGG,IAPH,CAOQP,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACK,IAAT,CAAcT,YAAf,CAPnC;AAQD,KATD,MASO;AACLC,MAAAA,eAAe,CAAC,EAAD,CAAf;AACD;AACF,GAbQ,EAaN,CAACF,MAAD,EAASD,IAAT,CAbM,CAAT;AAeA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEE,MAAAA,YAAF;AAAgBE,MAAAA;AAAhB,KAArC;AAAA,cACGL;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAtCeD,oB;UACWF,O;;;KADXE,oB","sourcesContent":["import { ReactNode, useEffect, useState } from \"react\";\nimport { Type } from \"../components/NewTransactionModal\";\nimport { TransactionsContext } from \"../contexts/Transactions\";\nimport { useAuth } from \"../hooks\";\nimport { api } from \"../services/api\";\n\ninterface TransactionsProviderProps {\n  children: ReactNode;\n}\n\nexport interface TransactionItemProps {\n  id: number;\n  title: string;\n  type: Type;\n  category: string;\n  amount: number;\n  createdAt: string;\n}\n\nexport type NewTransactionInput = Omit<\n  TransactionItemProps,\n  \"id\" | \"createdAt\"\n>;\n\ninterface TransactionResponseProps {\n  transaction: TransactionItemProps;\n}\n\ninterface TransactionsResponseProps {\n  transactions: TransactionItemProps[];\n}\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const { user, signed } = useAuth();\n  const [transactions, setTransactions] = useState<TransactionItemProps[]>([]);\n\n  async function createTransaction(transaction: NewTransactionInput) {\n    const response = await api.post<TransactionResponseProps>(\n      \"/transactions\",\n      transaction,\n      {\n        headers: {\n          username: user?.username,\n          token: user?.token\n        }\n      }\n    );\n    return setTransactions([...transactions, response.data.transaction]);\n  }\n\n  useEffect(() => {\n    if (signed) {\n      api\n        .get<TransactionsResponseProps>(\"/transactions\", {\n          headers: {\n            username: user?.username,\n            token: user?.token\n          }\n        })\n        .then(response => setTransactions(response.data.transactions));\n    } else {\n      setTransactions([]);\n    }\n  }, [signed, user]);\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}